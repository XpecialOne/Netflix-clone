{"version":3,"sources":["axios.js","Components/Row.js","requests.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchURL","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","className","map","movie","src","poster_path","alt","name","id","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAQeA,E,OAJEC,EAAMC,OAAO,CAC7BC,QAAS,iC,MCyCKC,MAvCf,YAAmC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAAY,EACFC,mBAAU,IADR,mBACvBC,EADuB,KACfC,EADe,KAmB9B,OAdAC,qBAAU,WAAM,4CAGZ,4BAAAC,EAAA,sEAC0BV,EAAMW,IAAIN,GADpC,cACUO,EADV,OAEIJ,EAAUI,EAAQC,KAAKC,SAF3B,kBAGWF,GAHX,4CAHY,0DASZG,KAED,CAACV,IAIA,sBAAKW,UAAU,MAAf,UACG,6BAAKZ,IAEJ,qBAAKY,UAAU,cAAf,SAGMT,EAAOU,KAAI,SAAAC,GAAK,OACb,qBAEAF,UAAU,aACVG,IAAG,UAjCP,wCAiCO,OAAgBD,EAAME,aAAeC,IAAKH,EAAMI,MAF9CJ,EAAMK,aCnC1BC,EAAU,mCAcDC,EAXE,CAChBC,cAAc,8BAAD,OAAgCF,EAAhC,mBACbG,sBAAsB,wBAAD,OAA0BH,EAA1B,qBACrBI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBACjBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA6BT,EAA7B,oBCWJU,MAjBf,WACE,OACE,sBAAKlB,UAAU,MAAf,UACC,0DACA,cAAC,EAAD,CAAKZ,MAAQ,oBAAoBC,SAAUoB,EAASE,wBACpD,cAAC,EAAD,CAAKvB,MAAQ,eAAeC,SAAUoB,EAASC,gBAC/C,cAAC,EAAD,CAAKtB,MAAQ,YAAYC,SAAUoB,EAASG,gBAC5C,cAAC,EAAD,CAAKxB,MAAQ,gBAAgBC,SAAUoB,EAASI,oBAChD,cAAC,EAAD,CAAKzB,MAAO,gBAAgBC,SAAUoB,EAASK,oBACjD,cAAC,EAAD,CAAK1B,MAAM,gBAAgBC,SAAUoB,EAASM,oBAC9C,cAAC,EAAD,CAAK3B,MAAM,iBAAiBC,SAAUoB,EAASO,qBAC/C,cAAC,EAAD,CAAK5B,MAAM,gBAAgBC,SAAUoB,EAASQ,yBCJlCE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a435af45.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n/** base url to make request to the themoviedatabase */\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://api.themoviedb.org/3'\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect} from 'react';\r\nimport axios from '../axios';\r\nimport \"../Components/row.css\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\r\n\r\n\r\nfunction Row( {title, fetchURL} ) { \r\n    const [movies, setMovies] = useState( [] );\r\n\r\n\r\n    // A snippet of code which runs based on a specific condition\r\n    useEffect(() => {\r\n        //if [](empty), run once when the row loads, and don't run again\r\n\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchURL);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n\r\n        fetchData();\r\n\r\n    }, [fetchURL]);\r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n           <h2>{title}</h2> \r\n            \r\n            <div className=\"row_posters\">\r\n\r\n                 {/* container -> posters */}\r\n                 {movies.map(movie => (\r\n                     <img \r\n                     key={movie.id}  // optimisation tip for a smoother scrolling of the row images\r\n                     className=\"row_poster\"\r\n                     src={`${base_url}${movie.poster_path}`} alt={movie.name} />\r\n                 ))}\r\n            </div> \r\n           \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"8440dd03ff61e550c0756a543ef31ee1\";\r\n\r\n\r\nconst requests = {\r\n\tfetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n\tfetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=123`,\r\n\tfetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n\tfetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n\tfetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n\tfetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n\tfetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n\tfetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n};\r\n\r\nexport default requests;","import React from \"react\";\nimport './App.css';\nimport Row from '../src/Components/Row';\nimport requests from './requests'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <h1>Hy test test test test!!</h1> \n     <Row title = \"NETFLIX ORIGINALS\" fetchURL={requests.fetchNetflixOriginals} />\n     <Row title = \"Trending now\" fetchURL={requests.fetchTrending}  />\n     <Row title = \"Top Rated\" fetchURL={requests.fetchTopRated}  />\n     <Row title = \"Action movies\" fetchURL={requests.fetchActionMovies}  />\n     <Row title= \"Comedy Movies\" fetchURL={requests.fetchComedyMovies} />\n\t\t <Row title=\"Horror Movies\" fetchURL={requests.fetchHorrorMovies} />\n\t\t\t<Row title=\"Romance Movies\" fetchURL={requests.fetchRomanceMovies} />\n\t\t\t<Row title=\"Documentaries\" fetchURL={requests.fetchDocumentaries} />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}