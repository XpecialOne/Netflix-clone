{"version":3,"sources":["axios.js","Components/Row.js","requests.js","Components/Banner.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchURL","isLargeRow","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","className","map","movie","src","poster_path","backdrop_path","alt","name","id","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ab7b9f1.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n/** base url to make request to the themoviedatabase */\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://api.themoviedb.org/3'\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect} from 'react';\r\nimport axios from '../axios';\r\nimport \"../Components/row.css\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\r\n\r\n\r\nfunction Row( {title, fetchURL, isLargeRow } ) { \r\n    const [movies, setMovies] = useState( [] );\r\n\r\n\r\n    // A snippet of code which runs based on a specific condition\r\n    useEffect(() => {\r\n        //if [](empty), run once when the row loads, and don't run again\r\n\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchURL);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n\r\n        fetchData();\r\n\r\n    }, [fetchURL]);\r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n           <h2>{title}</h2> \r\n            \r\n            <div className=\"row_posters\">\r\n\r\n                 {/* container -> posters */}\r\n                 {movies.map(movie => (\r\n                     <img \r\n                     key={movie.id}  // optimisation tip for a smoother scrolling of the row images\r\n                     className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                     src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n                 ))}\r\n            </div> \r\n           \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"8440dd03ff61e550c0756a543ef31ee1\";\r\n\r\n\r\nconst requests = {\r\n\tfetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n\tfetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=123`,\r\n\tfetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n\tfetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n\tfetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n\tfetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n\tfetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n\tfetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n};\r\n\r\nexport default requests;","import React, {useEffect, useState} from 'react';\r\nimport axios from '../axios';\r\nimport requests from '../requests';\r\nimport '../Components/Banner.css'\r\n\r\nfunction Banner() {\r\n\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect( () => {\r\n     async function fetchData() {\r\n     const request = await axios.get(requests.fetchTrending);\r\n    \r\n     // Select a random movie on the banner\r\n     setMovie(request.data.results[\r\n       Math.floor(Math.random() * request.data.results.length -1)  \r\n     ]);\r\n     return request;\r\n}\r\n    fetchData();\r\n}, []);\r\n\r\n// console.log(movie);\r\n\r\n\r\n    return (\r\n\r\n        \r\n        <header className=\"banner\"\r\n        style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\r\n        \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n        )`,\r\n        backgroundPosition: \"center center\"\r\n      }} >   {/* BG image */}\r\n\r\n\r\n        <div className=\"banner_contents\">\r\n        \r\n        \r\n\r\n          {/* Title */}\r\n          <h1 className=\"banner_title\"> {movie?.title || movie?.name || movie?.original_name} </h1>\r\n\r\n\r\n          {/* div > 2 buttons */}\r\n          <div className=\"banner_buttons\">\r\n          <button className=\"banner_button\">Play</button>\r\n          <button className=\"banner_button\">My List</button>\r\n        </div>\r\n        \r\n          {/* description */}\r\n          <h1 className=\"banner_description\">{movie?.overview}</h1>\r\n        </div>\r\n\r\n        <div className=\"banner--fadeBottom\" />\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React from \"react\";\nimport './App.css';\nimport Row from '../src/Components/Row';\nimport requests from './requests'\nimport Banner from '../src/Components/Banner'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n    {/* Nav bar*/}\n\n\n    {/* Banner */}\n    <Banner />\n    \n    {/* Rows */}\n    <Row title = \"Trending now\" \n     fetchURL={requests.fetchTrending}\n     isLargeRow  />\n    <Row \n     title = \"NETFLIX ORIGINALS\" \n     fetchURL={requests.fetchNetflixOriginals}\n      />\n    <Row title = \"Top Rated\" fetchURL={requests.fetchTopRated}  />\n    <Row title = \"Action movies\" fetchURL={requests.fetchActionMovies}  />\n    <Row title= \"Comedy Movies\" fetchURL={requests.fetchComedyMovies} />\n\t\t<Row title=\"Horror Movies\" fetchURL={requests.fetchHorrorMovies} />\n\t\t<Row title=\"Romance Movies\" fetchURL={requests.fetchRomanceMovies} />\n\t\t<Row title=\"Documentaries\" fetchURL={requests.fetchDocumentaries} />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}